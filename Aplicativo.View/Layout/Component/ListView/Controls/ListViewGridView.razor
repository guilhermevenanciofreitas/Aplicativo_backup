@typeparam Type

@inherits ListViewGridViewComponent<Type>;

@if (HelpDisplay.Display.Width > 0 && HelpDisplay.Display.Width <= (int)LayoutSize.Small)
{
    @if (_ListItemView?.Any(c => Convert.ToBoolean(c.GetType().GetProperty("Selected").GetValue(c)) == true) ?? false)
    {
        <AppBar>
            <Toolbar>
                <IconButton Edge="@IconButtonEdge.Start" Color="@Color.Inherit" OnClick="ListItemView_Unmake">
                    <ArrowBackIcon />
                </IconButton>
                <Typography Variant="@TypographyVariant.H6" Style="flex-grow: 1;">
                    @_ListItemView.Where(c => Convert.ToBoolean(c.GetType().GetProperty("Selected").GetValue(c)) == true).Count()  Selecionado(s)
                </Typography>

                @*<IconButton Color="@Color.Inherit" OnClick="@ItemViewButtonOpen_Show" RootRef="@ItemViewOpenButtonRef">
                        <MoreVertIcon />
                    </IconButton>*@

                @*<Skclusive.Material.Menu.Menu Open="@ItemViewButtonOpen" AnchorRef="@ItemViewOpenButtonRef" OnClose="@ItemViewOpen_Close">

                        <MenuItem OnClick="@(() => { ItemViewOpen_Close(null); MnuMarcarTodos_Click(); })">
                            Marcar todos
                        </MenuItem>

                        @foreach (var item in ItemViewButtons.Where(c => c.Visible))
                        {
                            <MenuItem OnClick="@(() => { ItemViewOpen_Close(null); item.OnClick(); })">
                                @item.Label
                            </MenuItem>
                        }
                    </Skclusive.Material.Menu.Menu>*@
            </Toolbar>
        </AppBar>
    }

    <List>
        @if (_ListItemView != null)
        {
            @foreach (var item in _ListItemView)
            {
                <LongPress OnLongPress="@(() => ListItemView_LongPress(item))" OnPress="@(() => ListItemView_Press(item))">
                    <ListItem AlignItems="@AlignItems.FlexStart" Button="true">
                        @if (_ListItemView?.Any(c => Convert.ToBoolean(c.GetType().GetProperty("Selected").GetValue(c)) == true) ?? false)
                        {
                            <ListItemIcon>
                                <Checkbox Checked="@(Convert.ToBoolean(item.GetType().GetProperty("Selected").GetValue(item)))" />
                            </ListItemIcon>
                        }
                        <div style="padding-left: 26px">
                            @ItemView(item)
                        </div>
                    </ListItem>
                    <Divider Component="li" />
                </LongPress>
            }
        }
    </List>
}

@if (HelpDisplay.Display.Width > (int)LayoutSize.Small)
{

    @if (ShowRegistroSelecionados)
    {
        <div style="margin-top: 5px; margin-bottom: 4px">
            @if (!_ListItemView?.Any(c => Convert.ToBoolean(c.GetType().GetProperty("Selected").GetValue(c)) == true) ?? false)
            {
                <font size="3">Nenhum registro selecionado</font>
            }
            else
            {
                <font size="3">@_ListItemView?.Where(c => Convert.ToBoolean(c.GetType().GetProperty("Selected").GetValue(c)) == true).Count() registro(s) selecionado(s)</font>
            }
        </div>
    }

    <div style="height: @Height">
        <SfGrid @ref="GridView" DataSource="_ListItemView" TValue="Type" AllowReordering="true" AllowResizing="true" AllowFiltering="true" AllowSorting="true" AllowGrouping="AllowGrouping" AllowPaging="AllowPaging" RowHeight="30" Height="100%" Width="auto" onselectstart='return false'>
            <GridFilterSettings Type="FilterType.Excel" />
            <GridEvents TValue="Type" OnRecordDoubleClick="GridViewItem_DoubleClick" />
            <GridPageSettings PageSize="30" />
            <GridColumns>
                @if (CheckBoxVisible)
                {
                    <GridColumn Width="@CheckBoxWidth" AllowSorting="false" AllowFiltering="false">
                        <HeaderTemplate>
                            <Checkbox OnChange="GridViewItemHeader_Change" Checked="@(_ListItemView.Any() && _ListItemView.Where(c => Convert.ToBoolean(c.GetType().GetProperty("Selected").GetValue(c)) == true).Count() == _ListItemView.Count)" Indeterminate="@(_ListItemView.Any(c => Convert.ToBoolean(c.GetType().GetProperty("Selected").GetValue(c)) == true) && _ListItemView.Where(c => Convert.ToBoolean(c.GetType().GetProperty("Selected").GetValue(c)) == true).Count() != _ListItemView.Count)" />
                        </HeaderTemplate>
                        <Template>
                            @{
                                <LongPress OnPress="@(c => GridViewItem_Checked((Type)context))">
                                    <Checkbox Checked="@(Convert.ToBoolean(context.GetType().GetProperty("Selected").GetValue(context)))" />
                                </LongPress>
                            }
                        </Template>
                    </GridColumn>
                }

                @Columns

            </GridColumns>
        </SfGrid>
    </div>

}