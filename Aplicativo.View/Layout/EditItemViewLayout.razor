@typeparam TValue

@inherits EditItemViewLayoutPage<TValue>

<style>
    .fab-button {
        right: 16px;
        bottom: 16px;
        position: fixed;
    }
</style>

<ViewModal @ref="ViewModal" Overlay="!Simples" FullScreen="true" Title="@Title" Width="@Width" ZIndex="Simples ? 8001 : 8000" OnLoad="ViewModal_PageLoad" OnHide="ViewModal_PageHide">

    @if (HelpParametros.Template == Template.Mobile)
    {
        <AppBar Style="position: relative;">
            <Toolbar>
                <IconButton Edge="@IconButtonEdge.Start" Color="@Color.Inherit" OnClick="ViewModal.Hide" aria-label="close">
                    <CloseIcon />
                </IconButton>
                <Typography Variant="@TypographyVariant.H6" Style="flex: 1; margin-left: 16px;">
                    @Title
                </Typography>
                <Button @ref="BtnSalvar.Button" Color="@Color.Inherit" OnClick="@BtnSalvar_Click" Disabled="BtnSalvar.Disabled">
                    @BtnSalvar.Label
                </Button>
                @if (ItemViewMode == ItemViewMode.Edit)
                {
                    <Button @ref="BtnExcluir.Button" Color="@Color.Inherit" OnClick="@BtnExcluir_Click" Disabled="BtnExcluir.Disabled">
                        @BtnExcluir.Label
                    </Button>
                }

                <IconButton Color="@Color.Inherit" OnClick="@ItemViewButtonOpen_Show" RootRef="@ItemViewOpenButtonRef">
                    <MoreVertIcon />
                </IconButton>

                <Skclusive.Material.Menu.Menu Open="@ItemViewButtonOpen" AnchorRef="@ItemViewOpenButtonRef" OnClose="@ItemViewOpen_Close">
                    @if (!Simples)
                    {
                        <MenuItem OnClick="@(() => { ItemViewOpen_Close(null); BtnLimpar_Click(); })">
                            Limpar
                        </MenuItem>
                    }
                    @if (ItemViewMode == ItemViewMode.Edit)
                    {
                        @foreach (var item in ItemViewButtons.Where(c => c.Visible))
                        {
                            <MenuItem OnClick="@(() => { ItemViewOpen_Close(null); item.OnClick(); })">
                                @item.Label
                            </MenuItem>
                        }
                    }
                </Skclusive.Material.Menu.Menu>

            </Toolbar>
        </AppBar>

        @View

    }
    else
    {
        <div class="box-header with-border">

            @if (!Simples)
            {
                <Button Variant="@ButtonVariant.Contained" OnClick="BtnLimpar_Click">
                    <StartIcon>
                        <FileCopyIcon />
                    </StartIcon>
                    <ChildContent>
                        Limpar
                    </ChildContent>
                </Button>
            }

            <Button @ref="BtnSalvar.Button" Variant="@ButtonVariant.Contained" OnClick="BtnSalvar_Click" Disabled="BtnSalvar.Disabled" Style=@("color: #fff; background-color: #5cb85c; width:" + BtnSalvar.Width)>
                <StartIcon>
                    <SaveIcon />
                </StartIcon>
                <ChildContent>
                    @BtnSalvar.Label
                </ChildContent>
            </Button>
            @if (ItemViewMode == ItemViewMode.Edit && BtnExcluir.Visible)
            {
                <Button @ref="BtnExcluir.Button" Variant="@ButtonVariant.Contained" OnClick="BtnExcluir_Click" Disabled="BtnExcluir.Disabled" Style=@("color: #fff; background-color: #df4759; width:" + BtnExcluir.Width)>
                    <StartIcon>
                        <DeleteIcon />
                    </StartIcon>
                    <ChildContent>
                        @BtnExcluir.Label
                    </ChildContent>
                </Button>
            }

            @if (ItemViewMode == ItemViewMode.Edit)
            {
                @foreach (var item in ItemViewButtons.Where(c => c.Visible))
                {
                    <Button @ref="item.Button" Variant="@ButtonVariant.Contained" OnClick="@item.OnClick" Disabled="item.Disabled">
                        @*<StartIcon>
                                @item.Icon
                            </StartIcon>*@
                        <ChildContent>
                            @item.Label
                        </ChildContent>
                    </Button>
                }
            }

        </div>

        <br />

        <Divider />

        @View

    }

</ViewModal>